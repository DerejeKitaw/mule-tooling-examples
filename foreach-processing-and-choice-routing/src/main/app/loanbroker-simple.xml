<?xml version="1.0" encoding="UTF-8"?>
<mule version="EE-3.5.0" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd  http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd  http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd ">

	<description>
		This Synchronous variant of loan broker example is modeled on the
		Enterprise integration Patterns book sample.
		See: http://www.eaipatterns.com/ComposedMessagingExample.html
	</description>

	<flow doc:description=" The main loanbroker flow that: i) Receives a customer request ii) Performs a lookup of the customer credit profile using a component binding iii) Determines the bank that should be used to request quotes iv) Sends the request to the selected banks and aggregates responses v) Selects the lowest quote from the list of quotes vi) Returns the response to the client   " doc:name="loan-broker-sync" name="loan-broker-sync">
		<description>
			The main loanbroker flow that:
			i) Receives a customer request
			ii) Performs a lookup of the customer credit profile using a component
			binding
			iii) Determines the bank that should be used to request quotes
			iv) Sends the request to the selected banks and aggregates responses
			v) Selects the lowest quote from the list of quotes
			vi) Returns the response to the client
		</description>

		<http:inbound-endpoint address="http://0.0.0.0:11081" doc:name="HTTP" exchange-pattern="request-response"/>

		<http:body-to-parameter-map-transformer doc:name="Body to Parameter Map"/>

		<choice doc:name="Choice">
			<when expression="!(payload.name == null || payload.ssn == null || payload.amount == null || payload.term==null)">
				<expression-component doc:name="create customer request"><![CDATA[import org.mule.example.loanbroker.message.CustomerQuoteRequest;
import org.mule.example.loanbroker.model.Customer;

payload = new CustomerQuoteRequest(new Customer(payload.name,
Integer.parseInt(payload.ssn)),
Integer.parseInt(payload.amount),
Integer.parseInt(payload.term));]]></expression-component>

				<enricher doc:name="Enrich with creditProfile" source="#[payload]" target="#[flowVars.creditProfile]">
					<flow-ref doc:name="lookupCustomerCreditProfile" name="lookupCustomerCreditProfile"/>
				</enricher>

				<enricher doc:name="Enrich with banks" source="#[payload]" target="#[flowVars.banks]">
					<flow-ref doc:name="lookupBanks" name="lookupBanks"/>
				</enricher>

				<set-variable doc:name="create empty quotes" value="#[new java.util.LinkedList()]" variableName="quotes"/>
				<foreach collection="#[flowVars.banks]" doc:name="Foreach">
					<enricher doc:name="Message Enricher" target="#[quotes.add($)]">
						<flow-ref doc:name="lookupLoanQuote" name="lookupLoanQuote"/>
					</enricher>
				</foreach>

				<flow-ref doc:name="findLowestLoanQuote" name="findLowestLoanQuote"/>

				<object-to-string-transformer doc:name="Object to String"/>
			</when>
			<otherwise>
				<expression-component doc:name="set error message"><![CDATA[payload="Error: incomplete request"]]></expression-component>
			</otherwise>
		</choice>

		<catch-exception-strategy doc:name="Catch Exception Strategy">
			<set-payload doc:name="Set error message" value="Error processing loan request"/>
		</catch-exception-strategy>
	</flow>

	<sub-flow doc:description="    Returns the customer credit profile obtained form the Credit Agency   " doc:name="lookupCustomerCreditProfile" name="lookupCustomerCreditProfile">
		<description>
			Returns the customer credit profile obtained form the Credit Agency
		</description>

		<set-payload doc:name="customer" value="#[payload.customer]"/>

		<processor-chain doc:name="Processor Chain">
			<cxf:jaxws-client doc:name="getCreditProfile" operation="getCreditProfile" serviceClass="org.mule.example.loanbroker.creditagency.CreditAgencyService"/>
			<http:outbound-endpoint address="http://localhost:18080/mule/TheCreditAgencyService" doc:name="HTTP"/>
		</processor-chain>

		<logger doc:name="creditProfile" level="INFO" message="Credit profile: #[payload]"/>
	</sub-flow>

	<sub-flow doc:description="    Returns the list of banks to contact and returns it as a flow variable    'banks'   " doc:name="lookupBanks" name="lookupBanks">
		<description>
			Returns the list of banks to contact and returns it as a flow variable
			'banks'
		</description>

		<choice doc:name="Choice">
			<when expression="payload.getLoanAmount() >= 20000">
				<expression-component doc:name="Bank1, Bank2"><![CDATA[payload=[new	java.net.URI('http://localhost:10080/mule/TheBank1'), new java.net.URI('http://localhost:20080/mule/TheBank2')]]]></expression-component>
			</when>
			<when expression="payload.getLoanAmount() >= 10000 || payload.getLoanAmount() &lt;= 19999">
				<expression-component doc:name="Bank3, Bank4"><![CDATA[payload=[new java.net.URI('http://localhost:30080/mule/TheBank3'), new java.net.URI('http://localhost:40080/mule/TheBank4')]]]></expression-component>
			</when>
			<otherwise>
				<expression-component doc:name="Bank5"><![CDATA[payload=[new java.net.URI('http://localhost:50080/mule/TheBank5')]]]></expression-component>
			</otherwise>
		</choice>

		<logger doc:name="banks" level="INFO" message="Banks to contact: #[payload]"/>
	</sub-flow>

	<sub-flow doc:description="    Returns a loanQuote from a given bank's URI   " doc:name="lookupLoanQuote" name="lookupLoanQuote">
		<description>
			Returns a loanQuote from a given bank's URI
		</description>

		<set-variable doc:name="bankUri" value="#[payload]" variableName="bankUri"/>

		<expression-component doc:name="create LoanBrokerLoanRequest"><![CDATA[import org.mule.example.loanbroker.message.LoanBrokerQuoteRequest;

LoanBrokerQuoteRequest bqr = new LoanBrokerQuoteRequest();
bqr.setCreditProfile(flowVars.creditProfile);
payload = bqr;]]></expression-component>

		<processor-chain doc:name="Processor Chain">
			<cxf:jaxws-client doc:name="getLoanQuote" operation="getLoanQuote" serviceClass="org.mule.example.loanbroker.bank.BankService"/>
			<http:outbound-endpoint address="http://#[flowVars.bankUri.getHost()]:#[flowVars.bankUri.getPort()]#[flowVars.bankUri.getPath()]" doc:name="HTTP"/>
		</processor-chain>
		<logger doc:name="quote" level="INFO" message="LoanQuote from #[flowVars.bankUri]: #[payload]"/>
	</sub-flow>

	<sub-flow doc:description="    Returns the loan quote with the lowest interest rate   " doc:name="findLowestLoanQuote" name="findLowestLoanQuote">
		<description>
			Returns the loan quote with the lowest interest rate
		</description>

		<expression-component doc:name="Expression"><![CDATA[import org.mule.example.loanbroker.model.LoanQuote;

LoanQuote lowestQuote = null;

for (Object current : (List) flowVars.quotes)
{
    LoanQuote loanQuote = (LoanQuote) current;
    if (lowestQuote == null)
    {
    lowestQuote = loanQuote;
    }
    else if (loanQuote.getInterestRate() < lowestQuote.getInterestRate())
    {
        lowestQuote = loanQuote;
    }
}

payload = lowestQuote;]]></expression-component>
		<logger doc:name="lowestQuote" level="INFO" message="Lowest loan quote: #[payload]"/>
	</sub-flow>

	<!-- MOCK SERVICES -->

	<flow doc:description="    The credit agency service will get the credit profile for a customer   " doc:name="TheCreditAgencyService" name="TheCreditAgencyService">
		<description>
			The credit agency service will get the credit profile for a customer
		</description>

		<http:inbound-endpoint address="http://localhost:18080/mule/TheCreditAgencyService" doc:name="HTTP" exchange-pattern="request-response"/>
		<cxf:jaxws-service doc:name="SOAP" serviceClass="org.mule.example.loanbroker.creditagency.DefaultCreditAgency"/>
		<component doc:name="creditAgency">
			<singleton-object class="org.mule.example.loanbroker.creditagency.DefaultCreditAgency"/>
		</component>
	</flow>

	<flow doc:description="    Mock flow representing Bank 1   " doc:name="Bank1Flow" name="Bank1Flow">
		<description>
			Mock flow representing Bank 1
		</description>

		<http:inbound-endpoint address="http://localhost:10080/mule/TheBank1" doc:name="HTTP" exchange-pattern="request-response"/>
		<cxf:jaxws-service doc:name="SOAP" serviceClass="org.mule.example.loanbroker.bank.Bank"/>
		<component doc:name="Bank 1">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #1"/>
			</singleton-object>
		</component>
	</flow>

	<flow doc:description="    Mock flow representing Bank 2   " doc:name="Bank2Flow" name="Bank2Flow">
		<description>
			Mock flow representing Bank 2
		</description>

		<http:inbound-endpoint address="http://localhost:20080/mule/TheBank2" doc:name="HTTP" exchange-pattern="request-response"/>
		<cxf:jaxws-service doc:name="SOAP" serviceClass="org.mule.example.loanbroker.bank.Bank"/>

		<component doc:name="Bank 2">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #2"/>
			</singleton-object>
		</component>
	</flow>

	<flow doc:description="    Mock flow representing Bank 3   " doc:name="Bank3Flow" name="Bank3Flow">
		<description>
			Mock flow representing Bank 3
		</description>

		<http:inbound-endpoint address="http://localhost:30080/mule/TheBank3" doc:name="HTTP" exchange-pattern="request-response"/>
		<cxf:jaxws-service doc:name="SOAP" serviceClass="org.mule.example.loanbroker.bank.Bank"/>
		<component doc:name="Bank 3">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #3"/>
			</singleton-object>
		</component>
	</flow>

	<flow doc:description="    Mock flow representing Bank 4   " doc:name="Bank4Flow" name="Bank4Flow">
		<description>
			Mock flow representing Bank 4
		</description>

		<http:inbound-endpoint address="http://localhost:40080/mule/TheBank4" doc:name="HTTP" exchange-pattern="request-response"/>
		<cxf:jaxws-service doc:name="SOAP" serviceClass="org.mule.example.loanbroker.bank.Bank"/>
		<component doc:name="Bank 4">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #4"/>
			</singleton-object>
		</component>
	</flow>

	<flow doc:description="    Mock flow representing Bank 5   " doc:name="Bank5Flow" name="Bank5Flow">
		<description>
			Mock flow representing Bank 5
		</description>

		<http:inbound-endpoint address="http://localhost:50080/mule/TheBank5" doc:name="HTTP" exchange-pattern="request-response"/>
		<cxf:jaxws-service doc:name="SOAP" serviceClass="org.mule.example.loanbroker.bank.Bank"/>
		<component doc:name="Bank 5">
			<singleton-object class="org.mule.example.loanbroker.bank.Bank">
				<property key="bankName" value="Bank #5"/>
			</singleton-object>
		</component>
	</flow>
</mule>